import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError
import time # Th√™m th∆∞ vi·ªán time ƒë·ªÉ m√¥ ph·ªèng ƒë·ªô tr·ªÖ (n·∫øu c·∫ßn)

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh",
    layout="wide"
)
st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch B√°o C√°o T√†i ch√≠nh üìä")

# --- Kh·ªüi t·∫°o Gemini Client (D√πng chung cho c·∫£ Ph√¢n t√≠ch v√† Chat) ---
# L·∫•y Kh√≥a API t·ª´ Streamlit Secrets
API_KEY = st.secrets.get("GEMINI_API_KEY")
GEMINI_CLIENT = None

if API_KEY:
    try:
        GEMINI_CLIENT = genai.Client(api_key=API_KEY)
    except Exception as e:
        # Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu kh√¥ng th·ªÉ kh·ªüi t·∫°o client nh∆∞ng kh√¥ng l√†m d·ª´ng app
        st.warning(f"L·ªói kh·ªüi t·∫°o Gemini Client: {e}. Vui l√≤ng ki·ªÉm tra API Key trong Secrets.")

# --- H√†m t√≠nh to√°n ch√≠nh (S·ª≠ d·ª•ng Caching ƒë·ªÉ T·ªëi ∆∞u hi·ªáu su·∫•t) ---
@st.cache_data
def process_financial_data(df):
    """Th·ª±c hi·ªán c√°c ph√©p t√≠nh TƒÉng tr∆∞·ªüng v√† T·ª∑ tr·ªçng."""
    # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† s·ªë ƒë·ªÉ t√≠nh to√°n
    numeric_cols = ['NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    # 1. T√≠nh T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng
    # D√πng .replace(0, 1e-9) cho Series Pandas ƒë·ªÉ tr√°nh l·ªói chia cho 0
    df['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'] = (
        (df['NƒÉm sau'] - df['NƒÉm tr∆∞·ªõc']) / df['NƒÉm tr∆∞·ªõc'].replace(0, 1e-9)
    ) * 100

    # 2. T√≠nh T·ª∑ tr·ªçng theo T·ªïng T√†i s·∫£n
    # L·ªçc ch·ªâ ti√™u "T·ªîNG C·ªòNG T√ÄI S·∫¢N"
    tong_tai_san_row = df[df['Ch·ªâ ti√™u'].str.contains('T·ªîNG C·ªòNG T√ÄI S·∫¢N', case=False, na=False)]
    if tong_tai_san_row.empty:
        raise ValueError("Kh√¥ng t√¨m th·∫•y ch·ªâ ti√™u 'T·ªîNG C·ªòNG T√ÄI S·∫¢N'.")

    tong_tai_san_N_1 = tong_tai_san_row['NƒÉm tr∆∞·ªõc'].iloc[0]
    tong_tai_san_N = tong_tai_san_row['NƒÉm sau'].iloc[0]

    # ******************************* PH·∫¶N S·ª¨A L·ªñI B·∫ÆT ƒê·∫¶U *******************************
    # L·ªói x·∫£y ra khi d√πng .replace() tr√™n gi√° tr·ªã ƒë∆°n l·∫ª (numpy.int64).
    # S·ª≠ d·ª•ng ƒëi·ªÅu ki·ªán ternary ƒë·ªÉ x·ª≠ l√Ω gi√° tr·ªã 0 th·ªß c√¥ng cho m·∫´u s·ªë.
    divisor_N_1 = tong_tai_san_N_1 if tong_tai_san_N_1 != 0 else 1e-9
    divisor_N = tong_tai_san_N if tong_tai_san_N != 0 else 1e-9

    # T√≠nh t·ª∑ tr·ªçng v·ªõi m·∫´u s·ªë ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    df['T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)'] = (df['NƒÉm tr∆∞·ªõc'] / divisor_N_1) * 100
    df['T·ª∑ tr·ªçng NƒÉm sau (%)'] = (df['NƒÉm sau'] / divisor_N) * 100
    # ******************************* PH·∫¶N S·ª¨A L·ªñI K·∫æT TH√öC *******************************

    return df

# --- H√†m g·ªçi API Gemini ---
def get_ai_analysis(data_for_ai, client):
    """G·ª≠i d·ªØ li·ªáu ph√¢n t√≠ch ƒë·∫øn Gemini API v√† nh·∫≠n nh·∫≠n x√©t."""
    if not client:
        return "L·ªói: Gemini Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets."

    try:
        model_name = 'gemini-2.5-flash'
        prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh chuy√™n nghi·ªáp. D·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa doanh nghi·ªáp. ƒê√°nh gi√° t·∫≠p trung v√†o t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng, thay ƒë·ªïi c∆° c·∫•u t√†i s·∫£n v√† kh·∫£ nƒÉng thanh to√°n hi·ªán h√†nh.
Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ /-strong, /-heart, :>, :o, :-((, :-h trong ph·∫£n h·ªìi.

D·ªØ li·ªáu th√¥ v√† ch·ªâ s·ªë: {data_for_ai}
"""
        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"


# --- Ch·ª©c nƒÉng 1: T·∫£i File ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file Excel B√°o c√°o T√†i ch√≠nh (Ch·ªâ ti√™u | NƒÉm tr∆∞·ªõc | NƒÉm sau)",
    type=['xlsx', 'xls']
)

if uploaded_file is not None:
    try:
        df_raw = pd.read_excel(uploaded_file)
        # Ti·ªÅn x·ª≠ l√Ω: ƒê·∫£m b·∫£o ch·ªâ c√≥ 3 c·ªôt quan tr·ªçng
        df_raw.columns = ['Ch·ªâ ti√™u', 'NƒÉm tr∆∞·ªõc', 'NƒÉm sau']

        # X·ª≠ l√Ω d·ªØ li·ªáu
        df_processed = process_financial_data(df_raw.copy())

        if df_processed is not None:
            # --- Ch·ª©c nƒÉng 2 & 3: Hi·ªÉn th·ªã K·∫øt qu·∫£ ---
            st.subheader("2. T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng & 3. T·ª∑ tr·ªçng C∆° c·∫•u T√†i s·∫£n")
            st.dataframe(df_processed.style.format({
                'NƒÉm tr∆∞·ªõc': '{:,.0f}',
                'NƒÉm sau': '{:,.0f}',
                'T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)': '{:.2f}%',
                'T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)': '{:.2f}%',
                'T·ª∑ tr·ªçng NƒÉm sau (%)': '{:.2f}%'
            }), use_container_width=True)

            # --- Ch·ª©c nƒÉng 4: T√≠nh Ch·ªâ s·ªë T√†i ch√≠nh ---
            st.subheader("4. C√°c Ch·ªâ s·ªë T√†i ch√≠nh C∆° b·∫£n")
            try:
                # L·ªçc gi√° tr·ªã cho Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh
                # L·∫•y T√†i s·∫£n ng·∫Øn h·∫°n
                tsnh_n = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
                tsnh_n_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                # L·∫•y N·ª£ ng·∫Øn h·∫°n
                no_ngan_han_N = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
                no_ngan_han_N_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                # T√≠nh to√°n
                thanh_toan_hien_hanh_N = tsnh_n / no_ngan_han_N
                thanh_toan_hien_hanh_N_1 = tsnh_n_1 / no_ngan_han_N_1

                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm tr∆∞·ªõc)",
                        value=f"{thanh_toan_hien_hanh_N_1:.2f} l·∫ßn"
                    )
                with col2:
                    st.metric(
                        label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm sau)",
                        value=f"{thanh_toan_hien_hanh_N:.2f} l·∫ßn",
                        delta=f"{thanh_toan_hien_hanh_N - thanh_toan_hien_hanh_N_1:.2f}"
                    )
            except IndexError:
                st.warning("Thi·∫øu ch·ªâ ti√™u 'T√ÄI S·∫¢N NG·∫ÆN H·∫†N' ho·∫∑c 'N·ª¢ NG·∫ÆN H·∫†N' ƒë·ªÉ t√≠nh ch·ªâ s·ªë.")
                thanh_toan_hien_hanh_N = "N/A" # D√πng ƒë·ªÉ tr√°nh l·ªói ·ªü Ch·ª©c nƒÉng 5
                thanh_toan_hien_hanh_N_1 = "N/A"
            except ZeroDivisionError:
                st.warning("N·ª£ Ng·∫Øn H·∫°n b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh.")
                thanh_toan_hien_hanh_N = "N/A"
                thanh_toan_hien_hanh_N_1 = "N/A"

            # --- Ch·ª©c nƒÉng 5: Nh·∫≠n x√©t AI ---
            st.subheader("5. Nh·∫≠n x√©t T√¨nh h√¨nh T√†i ch√≠nh (AI)")

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i cho AI
            data_for_ai = pd.DataFrame({
                'Ch·ªâ ti√™u': [
                    'To√†n b·ªô B·∫£ng ph√¢n t√≠ch (d·ªØ li·ªáu th√¥)',
                    'TƒÉng tr∆∞·ªüng T√†i s·∫£n ng·∫Øn h·∫°n (%)',
                    'Thanh to√°n hi·ªán h√†nh (N-1)',
                    'Thanh to√°n hi·ªán h√†nh (N)'
                ],
                'Gi√° tr·ªã': [
                    df_processed.to_markdown(index=False),
                    (f"{df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'].iloc[0]:.2f}%" 
                     if 'T√ÄI S·∫¢N NG·∫ÆN H·∫†N' in df_processed['Ch·ªâ ti√™u'].str.upper().str.replace(' ', '').values else "N/A"),
                    f"{thanh_toan_hien_hanh_N_1}",
                    f"{thanh_toan_hien_hanh_N}"
                ]
            }).to_markdown(index=False)

            if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch"):
                if GEMINI_CLIENT:
                    with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                        ai_result = get_ai_analysis(data_for_ai, GEMINI_CLIENT)
                        st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                        st.info(ai_result)
                else:
                    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API ho·∫∑c Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

    except ValueError as ve:
        st.error(f"L·ªói c·∫•u tr√∫c d·ªØ li·ªáu: {ve}")
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω file: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")


# ******************************************************************************
# --- PH·∫¶N B·ªî SUNG: CH·ª®C NƒÇNG CHAT V·ªöI GEMINI ---
# ******************************************************************************
st.markdown("---")
st.subheader("6. H·ªó tr·ª£ H·ªèi ƒê√°p v·ªõi Gemini (gemini-2.5-flash)")

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat trong session state
if "messages" not in st.session_state:
    st.session_state.messages = []
    # Th√™m tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu
    st.session_state.messages.append({
        "role": "assistant",
        "content": "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI. H√£y h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ thu·∫≠t ng·ªØ t√†i ch√≠nh n√†o ho·∫∑c y√™u c·∫ßu t√¥i gi·∫£i th√≠ch th√™m v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch n·∫øu b·∫°n ƒë√£ t·∫£i file l√™n nh√©."
    })

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# X·ª≠ l√Ω input chat m·ªõi
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n t·∫°i ƒë√¢y..."):
    # 1. Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})

    # 2. Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)

    # 3. G·ªçi Gemini API
    if GEMINI_CLIENT:
        try:
            # X√¢y d·ª±ng n·ªôi dung cho API call, bao g·ªìm l·ªãch s·ª≠
            # Chuy·ªÉn ƒë·ªãnh d·∫°ng l·ªãch s·ª≠ Streamlit sang ƒë·ªãnh d·∫°ng API
            contents = [
                {"role": "user" if m["role"] == "user" else "model", "parts": [{"text": m["content"]}]}
                for m in st.session_state.messages
            ]
            
            with st.chat_message("assistant"):
                # D√πng spinner ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang ch·ªù
                with st.spinner('ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ Gemini...'):
                    # S·ª≠ d·ª•ng model h·ªó tr·ª£ chat
                    response = GEMINI_CLIENT.models.generate_content(
                        model='gemini-2.5-flash',
                        contents=contents
                    )
                
                ai_response = response.text
                
                # 4. Th√™m ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": ai_response})

                # 5. Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa AI
                st.markdown(ai_response)
        
        except APIError as e:
            error_msg = f"L·ªói g·ªçi Gemini API trong Chat: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt: {e}"
            st.session_state.messages.append({"role": "assistant", "content": error_msg})
            with st.chat_message("assistant"):
                st.error(error_msg)
        except Exception as e:
            error_msg = f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong Chat: {e}"
            st.session_state.messages.append({"role": "assistant", "content": error_msg})
            with st.chat_message("assistant"):
                st.error(error_msg)
    else:
        error_msg = "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Gemini. Vui l√≤ng ki·ªÉm tra Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets."
        st.session_state.messages.append({"role": "assistant", "content": error_msg})
        with st.chat_message("assistant"):
            st.error(error_msg)
